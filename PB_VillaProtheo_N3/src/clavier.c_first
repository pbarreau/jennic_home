// -----------------------------------
// Projet	: PBPJ1
//	Fic		: clavier.c
//  Cree	: 30 juil. 2012
//	Par		: Administrateur
// -----------------------------------
//#include <jendefs.h>

#include <JPI.h>
#include <JPI.h>
#include <Printf.h>
#include <string.h>
#include "e_config.h"

/****************************************************************************/
/***        Exported Variables                                            ***/
/****************************************************************************/
bool_t startDebounceTimer = FALSE;
uint16 waitDebounce = 0;

uint16 TimingIo_19 = 0;
bool_t bStartTimerIo_19 = FALSE;

uint16 TimingIo_20 = 0;
bool_t bIo_20 = FALSE;
bool_t bStartTimerIo_20 = FALSE;

PUBLIC bool_t eSetAllOff = FALSE;
PUBLIC bool_t bChangeState = FALSE;

PUBLIC PBAR_KIT_8046 eKeyTouched = E_KPD_NONE;


PUBLIC uint16 PBAR_ScanKey(void)
{
	return((uint16)(u32JPI_DioReadInput()>>11));
	//return((uint16)(u32AHI_DioReadInput()>>11));
}


PUBLIC bool_t PBAR_TraiterClavier(
		teAppState *eAppState,
		bpeClav *usage,
		PBAR_KIT_8046 eToucheClavier)
{
	bool_t eReturn = TRUE;
	PBAR_E_KeyMode eWrkMode;

	PRIVATE char const *msg[2]=
	{
			"UTILISATEUR",
			"INSTALLATEUR"
	};


	switch(eToucheClavier){
		case E_KPD_A:
		case E_KPD_B:
		case E_KPD_C:
		case E_KPD_D:
		case E_KPD_1:
		case E_KPD_2:
		case E_KPD_3:
		case E_KPD_4:
		{
			vPrintf("\nTouche:%d\n",eToucheClavier);
			*eAppState = APP_STATE_EXECUTER_TOUCHE_KBD;
		}
		break;

		case E_KPD_ALL:
		{
			if(TimingIo_19 && (bStartTimerIo_19 == FALSE))
			{
				// Demande all off
				if(TimingIo_19>2 && TimingIo_19<80){
					vPrintf("\nDemande ALL OFF !! \n");
					eSetAllOff = TRUE;
				}
				else{
					// Demande all on
					vPrintf("\nDemande ALL ON !! \n");
					eSetAllOff = FALSE;
				}
				vPrintf(" Duree IO_19:%d\n",TimingIo_19);
				//vPrintf("State:%x,Mode%x\n",*eAppState,*eKeyMode);
				// reset compteur
				TimingIo_19 = 0;
				*eAppState =APP_STATE_EXECUTER_TOUCHE_KBD;
			}
		}
		break;

		case E_KPD_MODE:
		{
			// Verifier touche mode non appuyee
			// Lire etat clavier
			if(IsBitSet(PBAR_ScanKey(),9))
			{
				//if(TimingIo_20)
				{
					if(TimingIo_20<C_IMPULSION_COURTE){

						if(bChangeState){
							bChangeState = FALSE;
							eKeyMode = E_CLAV_MODE_NOT_SET;
							eModeOnConf = E_CLAV_MODE_NOT_SET;
						}
						else{
							// BUG ??
							//vPrintf(" Changement de mode\n");
						}
					}
					else
						if(TimingIo_20<C_IMPULSION_LONGUE)
						{
							// Bascule entre conf et usage regulier
							bChangeState = TRUE;

							vPrintf("\nImpulsion moyenne Clav  %s ->  ",msg[(*usage)-1]);

							if((*usage) ==	 E_CLAV_EN_CONFIG)
							{
								vPrintf("Kbd en conf\n");
								*usage = 	E_CLAV_EN_USAGE;
								au8Led[0].mode= E_FLASH_RESEAU_ACTIF;
								eKeyMode = E_CLAV_MODE_NOT_SET;

								// Pour obliger passage en configuration
								if(eeprom.nbBoite == 0){
									au8Led[1].actif = TRUE;
								}
							}
							else
							{
								vPrintf("Kbd en normal\n");
								*usage =	E_CLAV_EN_CONFIG;
								au8Led[0].mode= E_FLASH_EN_ATTENTE_TOUCHE_BC;
								eModeOnConf = E_CLAV_MODE_NOT_SET;
							}
							vPrintf("%s ",msg[(*usage)-1]);
							vPrintf("nbBoite:%d\n",eeprom.nbBoite);

						}
						else
							// Reset composant
							if(TimingIo_20>C_IMPULSION_RESET_IN && TimingIo_20<C_IMPULSION_RESET_OUT)
							{
								vPrintf("Reset Jennic\n");
								vAHI_SwReset ();
							}
							else
							{
								// Erase flash + Reset composant
								vPrintf("Effacement Memoire + reset\n");
								bAHI_FlashEraseSector(7);
								memset(&eeprom,0x00,sizeof(eeprom));
								bAHI_FullFlashProgram(FLASH_START, sizeof(bpsFlash), (uint8 *) &eeprom);
								vAHI_SwReset ();
							}


					*eAppState = APP_STATE_CHANGE_MOD;
					TimingIo_20 = 0;

				}
			}

		}
		break;

		case E_KPD_NONE:
			// Rien
			break;
		default:
		{
			vPrintf("Touche clavier inconnue:%d\n",eToucheClavier);
		}
		break;
	}
	return (eReturn);
}
